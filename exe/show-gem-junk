#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift File.expand_path('../lib', __dir__)

require 'show/gem/junk'
require 'active_support'
require 'active_support/core_ext/numeric/conversions'
require 'colorator'
require 'optparse'

HOME_DIR = ENV.fetch('HOME', '~')
COL_WIDTH = 10

def try_fetch_gem_home
  ENV.fetch('GEM_HOME')
rescue KeyError
  export_line = "export GEM_HOME=#{HOME_DIR}/.gem/ruby/2.6.0".red.bold
  warn <<-MSG
  #{'ERROR:'.red.bold}
    This tool requires the $GEM_HOME environment variable to be set.
    You do not have a value for $GEM_HOME.

    Before running this tool, please set your $GEM_HOME.
    For example:

      #{export_line}

  MSG
  exit 1
end

GEMS_DIR = File.join(try_fetch_gem_home, '/gems/')

def main
  # Parse options
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

    opts.on('-v', '--[no-]verbose', 'Print verbose list of files') do |v|
      options[:verbose] = v
    end
  end.parse!

  # Collect gems
  gems = Dir.glob("#{GEMS_DIR}*").map do |gem|
    Show::Gem::Junk::RubyGem.new(gem)
  end
  gems = gems.reject { |g| g.junk_files.empty? }.sort.reverse

  # Print results
  if options[:verbose]
    print_verbose(gems)
  else
    print_table(gems)
  end

  print_total(gems)
end

def print_table(gems)
  max_gem_name_len = gems.map { |g| g.name.size }.max || 0

  # Header
  puts
  puts [
    'Gem Name'.ljust(max_gem_name_len),
    'Version'.rjust(COL_WIDTH),
    'Size'.rjust(COL_WIDTH),
    'Junk'.rjust(COL_WIDTH),
    '% Junk'.rjust(COL_WIDTH)
  ].join(' ').bold

  # Rows
  gems.each do |gem|
    puts [
      gem.name.ljust(max_gem_name_len),
      gem.version.rjust(COL_WIDTH),
      gem.size.to_fs(:human_size).rjust(COL_WIDTH),
      gem.junk_size.to_fs(:human_size).rjust(COL_WIDTH),
      gem.percent_junk.round(2).to_s.rjust(COL_WIDTH)
    ].join(' ')
  end
end

def print_verbose(gems)
  gems.each do |gem|
    puts
    puts 'Gem Name: '.bold + gem.name
    puts 'Version:  '.bold + gem.version
    puts 'Path:     '.bold + gem.path
    puts 'Size:     '.bold + gem.size.to_fs(:human_size)
    puts 'Junk:     '.bold + gem.junk_size.to_fs(:human_size)
    puts '% Junk:   '.bold + gem.percent_junk.round(2).to_s
    puts

    max_junk_name_len = gem.junk_files.map { |g| g.pretty_path.size }.max || 0
    puts [
      'Junk File'.ljust(max_junk_name_len),
      'Size'.rjust(COL_WIDTH)
    ].join(' ').bold

    gem.junk_files.sort.reverse_each do |file|
      puts [
        file.pretty_path.ljust(max_junk_name_len),
        file.size.to_fs(:human_size).rjust(COL_WIDTH)
      ].join(' ')
    end
    puts
    puts '=' * 80
  end
end

def print_total(gems)
  total_junk = gems.sum(&:junk_size)
  puts
  puts "Grand total size of junk: #{total_junk.to_fs(:human_size)}"
end

main
